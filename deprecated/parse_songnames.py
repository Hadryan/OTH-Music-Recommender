import os
import re


def parse_songlist(path_textfile):
    """
    This method parses the songnames from a textfile that was generated by running:
    "find Music/High-Resolution Audio -type f > songlist.txt" into songnames and interpreters
    :param path_textfile: Path to the textfile containing the song paths
    :return: list of tuples: [(interpreter, songname, orginal_path), ...]
    """
    songlist = open(path_textfile, "r")
    interpreters_and_songnames = []
    for line in songlist:
        # print(line)
        path, file = os.path.split(line)
        file = os.path.splitext(file)[0]  # remove file extension
        #file = re.sub("^(\d+(.){0,1}(\s-){0,1}(\s){0,1})", "", file)  # remove song number
        file = re.sub("^(\d{2}\s-\s)", "", file)
        file = re.sub("^(\d{2}\s)", "", file)
        file = re.sub("^(\d{2}.\s)", "", file)
        file = re.sub("^(\d{1,2}-)", "", file)


        interpreter = re.split("/", path)[
            2]  # pathname like: Music/DSD Multichannel/Interpreter/Albumname/CD/Songname
        print(file)
        if re.sub(" ", "",
                  interpreter).lower() != "variousartists":  # only remove artist from name if not various artists
            file = re.split("(\s-\s)", file)[
                -1]  # remove the interpreter from name if present, usually at 1st position

            if len(re.findall("\s-\s", file)) > 1: # if invalid name
                file = "" # only search by interpreter and take first best song

        else:
            interpreter = ""  # dont search for various artists

            if len(re.findall("\s-\s", file)) > 2:  # if invalid name and various artists
                interpreter = re.split("\s-\s", file)[0]  # parse interpreter from name
                file = ""

        interpreters_and_songnames.append((interpreter, file, line))
        # print(interpreter)
        # print(file)
    songlist.close()
    return interpreters_and_songnames


